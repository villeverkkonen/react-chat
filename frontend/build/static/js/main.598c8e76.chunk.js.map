{"version":3,"sources":["store/message/types.tsx","store/message/reducer.tsx","store/nickname/types.tsx","store/nickname/reducer.tsx","store/index.tsx","components/MessageList.tsx","components/ChatForm.tsx","store/message/actions.tsx","components/UserList.tsx","components/ChatPage.tsx","components/NotFound.tsx","routes/AppRouter.tsx","App.tsx","index.tsx"],"names":["SEND_MESSAGE","initialState","messages","messageReducer","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","payload","CHANGE_NICKNAME","nickname","Math","floor","random","rootReducer","combineReducers","nicknameReducer","MessageList","_React$Component","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","messageListRef","React","createRef","scrollToBottom","elementToBeScrolled","scrollTop","scrollHeight","inherits","createClass","key","value","messageListElement","current","clientHeight","props","react_default","a","createElement","className","id","ref","style","display","height","overflowY","map","message","timestamp","fontWeight","marginBottom","user","marginTop","Component","connect","ChatForm","keyPress","e","sendChatMessage","sendMessage","Date","getTime","setState","sendChatMessageWithParams","updateUser","event","currentTarget","updateMessage","_this$state","onChange","onKeyPress","placeholder","autoFocus","onClick","dispatch","UserList","ChatPage","components_MessageList","components_ChatForm","components_UserList","NotFound","AppRouter","react_router_dom","react_router","exact","path","component","App","routes_AppRouter","store","middlewares","thunk","middlewareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.598c8e76.chunk.js","sourcesContent":["export interface Message {\r\n  user: string;\r\n  message: string;\r\n  timestamp: number;\r\n};\r\n\r\nexport interface MessageState {\r\n  messages: Message[];\r\n};\r\n\r\nexport const SEND_MESSAGE: string = 'SEND_MESSAGE';\r\n\r\ninterface SendMessageAction {\r\n  type: typeof SEND_MESSAGE;\r\n  payload: Message;\r\n};\r\n\r\nexport type MessageActionTypes = SendMessageAction;","import {\r\n  MessageState,\r\n  SEND_MESSAGE,\r\n  MessageActionTypes\r\n} from './types';\r\n\r\nconst initialState: MessageState = {\r\n  messages: [\r\n    // {\r\n    //   user: 'Chat Bot',\r\n    //   message: 'Testi 1',\r\n    //   timestamp: new Date().getTime()\r\n    // },\r\n    // {\r\n    //   user: 'Chat Bot',\r\n    //   message: 'Testi 2',\r\n    //   timestamp: new Date().getTime()\r\n    // }\r\n  ]\r\n};\r\n\r\nexport function messageReducer(\r\n  state = initialState,\r\n  action: MessageActionTypes\r\n): MessageState {\r\n    switch (action.type) {\r\n      case SEND_MESSAGE:\r\n        return {\r\n          messages: [...state.messages, action.payload]\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};\r\n\r\nexport default messageReducer;","export interface NicknameState {\r\n  nickname: string;\r\n};\r\n\r\nexport const CHANGE_NICKNAME: string = 'CHANGE_NICKNAME';\r\n\r\ninterface ChangeNicknameAction {\r\n  type: typeof CHANGE_NICKNAME;\r\n  payload: string;\r\n};\r\n\r\nexport type NicknameActionTypes = ChangeNicknameAction;","   \r\nimport {\r\n  NicknameState,\r\n  CHANGE_NICKNAME,\r\n  NicknameActionTypes\r\n} from './types';\r\n\r\nconst initialState: NicknameState = {\r\n  nickname: 'Guest' + Math.floor(Math.random() * 1001)\r\n};\r\n\r\nexport function nicknameReducer(\r\n  state = initialState,\r\n  action: NicknameActionTypes\r\n): NicknameState {\r\n    switch (action.type) {\r\n      case CHANGE_NICKNAME:\r\n        return {\r\n          nickname: action.payload\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { messageReducer } from './message/reducer';\r\nimport { nicknameReducer } from './nickname/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  nicknameReducer: nicknameReducer,\r\n  messageReducer: messageReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const middlewares = [thunk];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(middlewareEnhancer)\r\n  );\r\n\r\n  return store;\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Message } from '../store/message/types';\r\n\r\ninterface MessageListState {\r\n  messageReducer: {\r\n    messages: [];\r\n  }\r\n}\r\n\r\ninterface MessageListProps {\r\n  messages: [];\r\n}\r\n\r\nexport class MessageList extends React.Component {\r\n  messageListRef = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate(): void {\r\n    const messageListElement: Element = this.messageListRef.current as Element;\r\n    const shouldScroll: boolean = messageListElement.scrollTop + messageListElement.clientHeight !== messageListElement.scrollHeight;\r\n\r\n    if (shouldScroll) {\r\n      this.scrollToBottom(messageListElement);\r\n    }\r\n  }\r\n\r\n  scrollToBottom = (elementToBeScrolled: Element): void => {\r\n    elementToBeScrolled.scrollTop = elementToBeScrolled.scrollHeight;\r\n  };\r\n\r\n  render() {\r\n    const { messages } = this.props as MessageListProps;\r\n\r\n    return (\r\n      <div className=\"message-list\" id=\"message-list\" ref={this.messageListRef} style={{ display: 'inline-block', height: 'calc(100vh - 200px)', overflowY: 'scroll' }}>\r\n        {messages.map((message: Message) => (\r\n          <div className=\"message-item\" key={message.timestamp}>\r\n            <p className=\"message-from\" style={{ fontWeight: 'bold', marginBottom: 0 }}>From: {message.user}</p>\r\n            <p style={{ marginTop: 0 }}>{message.message}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: MessageListState) => ({\r\n  messages: state.messageReducer.messages\r\n});\r\n\r\nexport default connect(mapStateToProps)(MessageList);","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessage } from '../store/message/actions';\r\nimport { Message } from '../store/message/types';\r\nimport messageReducer from '../store/message/reducer';\r\n\r\ninterface ChatFormProps {\r\n  sendMessage: (message: Message) => void;\r\n}\r\n\r\ntype UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\r\ntype UpdateNicknameParam = React.SyntheticEvent<{ value: string }>;\r\n\r\nexport class ChatForm extends React.Component<ChatFormProps> {\r\n  state = {\r\n    user: '',\r\n    message: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    const user = \"Guest\" + Math.floor(Math.random() * 1001);\r\n    this.setState({ user });\r\n\r\n    this.sendChatMessageWithParams({\r\n      user: 'Chat Bot',\r\n      message: 'Hello ' + user + '! Change the nickname and start chatting.',\r\n      timestamp: new Date().getTime()\r\n    });\r\n  }\r\n\r\n  keyPress = (e: React.KeyboardEvent<any>) => {\r\n    if (e.key === \"Enter\") {\r\n      this.sendChatMessage();\r\n    }\r\n  }\r\n\r\n  sendChatMessage = (): void => {\r\n    if (this.state.message !== '') {\r\n      this.props.sendMessage({\r\n        user: this.state.user,\r\n        message: this.state.message,\r\n        timestamp: new Date().getTime()\r\n      });\r\n      this.setState({ message: '' });\r\n    }\r\n  };\r\n\r\n  sendChatMessageWithParams = (message: Message) => {\r\n    this.props.sendMessage(message);\r\n  }\r\n\r\n  updateUser = (event: UpdateNicknameParam) => {\r\n    this.setState({ user: event.currentTarget.value });\r\n  }\r\n\r\n  updateMessage = (event: UpdateMessageParam) => {\r\n    this.setState({ message: event.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    const { user, message } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"chat-form\">\r\n          <input\r\n            id=\"nickname-input\"\r\n            value={user}\r\n            onChange={this.updateUser}\r\n          />\r\n          <br />\r\n          <input\r\n            id=\"chat-input\"\r\n            value={message}\r\n            onChange={this.updateMessage}\r\n            onKeyPress={this.keyPress}\r\n            className=\"chat-input\"\r\n            placeholder=\"Type a message...\"\r\n            autoFocus\r\n          />\r\n          <button onClick={this.sendChatMessage} id=\"send-message-btn\">Send</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any): ChatFormProps => ({\r\n  sendMessage: (message: Message) => dispatch(sendMessage(message))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ChatForm);","import { Message, SEND_MESSAGE, MessageActionTypes } from './types';\r\n\r\nexport function sendMessage(newMessage: Message): MessageActionTypes {\r\n  return {\r\n    type: SEND_MESSAGE,\r\n    payload: newMessage\r\n  };\r\n}","import React from 'react';\r\n\r\nexport class UserList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p style={{fontWeight: 'bold'}}>Users online:</p>\r\n        <ul className=\"user-list\" id=\"user-list\"></ul>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\nimport MessageList from './MessageList';\r\nimport ChatForm from './ChatForm';\r\nimport UserList from './UserList';\r\n\r\nconst ChatPage = () => {\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <MessageList />\r\n      <ChatForm />\r\n      <UserList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatPage;","import React from 'react';\r\n\r\nconst NotFound: React.FC = () => <h1>Not found</h1>\r\n\r\nexport default NotFound","import React from 'react';\r\nimport ChatPage from '../components/ChatPage';\r\nimport NotFound from '../components/NotFound';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nclass AppRouter extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={ChatPage} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  };\r\n}\r\n\r\nexport default AppRouter;","import React from 'react';\nimport AppRouter from './routes/AppRouter';\nimport MessageList from './components/MessageList';\nimport ChatForm from './components/ChatForm';\nimport { AppState } from './store';\nimport { changeNickname } from './store/nickname/actions';\nimport { sendMessage } from './store/message/actions';\nimport { NicknameState } from './store/nickname/types';\nimport { MessageState } from './store/message/types';\nimport { connect } from 'react-redux';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <AppRouter />\n    );\n  };\n}\n\nexport default App;\n\n// interface AppProps {\n//   sendMessage: typeof sendMessage;\n//   nicknameReducer: NicknameState;\n//   messageReducer: MessageState;\n// };\n\n// export type UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\n// export type UpdateNicknameParam = React.SyntheticEvent<{ value: string }>;\n\n// class App extends React.Component<AppProps> {\n//   state = {\n//     message: '',\n//     nickname: ''\n//   };\n\n//   componentDidMount() {\n//     const nickname = \"Guest\" + Math.floor(Math.random() * 1001);\n//     this.setState({ nickname });\n\n//     this.props.sendMessage({\n//       user: 'Chat Bot',\n//       message: 'Hello ' + nickname + '!',\n//       timestamp: new Date().getTime()\n//     });\n//   }\n\n//   updateNickname = (event: UpdateNicknameParam) => {\n//     this.setState({ nickname: event.currentTarget.value });\n//   }\n\n//   updateMessage = (event: UpdateMessageParam) => {\n//     this.setState({ message: event.currentTarget.value });\n//   };\n\n//   sendMessage = (message: string) => {\n//     this.props.sendMessage({\n//       user: this.state.nickname,\n//       message: message,\n//       timestamp: new Date().getTime()\n//     });\n//     this.setState({ message: '' });\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"parent\">\n//         <MessageList messageReducer={this.props.messageReducer} />\n//         <ChatForm\n//           nickname={this.state.nickname}\n//           message={this.state.message}\n//           sendMessage={this.sendMessage}\n//           updateMessage={this.updateMessage}\n//           updateNickname={this.updateNickname}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state: AppState) => ({\n//   nicknameReducer: state.nicknameReducer,\n//   messageReducer: state.messageReducer\n// });\n\n// export default connect(\n//   mapStateToProps,\n//   { changeNickname, sendMessage }\n// )(App);","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport App from './App';\n\nconst store = configureStore();\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}