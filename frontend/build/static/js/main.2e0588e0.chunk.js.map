{"version":3,"sources":["store/message/reducer/index.tsx","store/message/actions/index.tsx","store/socket/reducer/index.tsx","store/socket/actions/index.tsx","store/user/reducer/index.tsx","store/user/actions/index.tsx","store/socket/middleware/Socket.tsx","store/socket/middleware/index.tsx","store/index.tsx","components/UserList.tsx","components/MessageList.tsx","components/ChatForm.tsx","components/ChatPage.tsx","components/NotFound.tsx","routes/AppRouter.tsx","App.tsx","index.tsx"],"names":["initialState","username","Math","floor","random","messages","messageReducer","state","action","type","concat","message","connected","socketReducer","reduced","Object","assign","isError","usernames","userReducer","filter","map","EVENTS","Socket","onChange","onMessage","port","socket","connect","io","on","onConnected","helloMessage","timestamp","Date","getTime","joinMessage","sendMessageToMe","sendMessageToOthers","updateUserList","disconnect","emit","console","error","log","leaveMessage","close","this","socketMiddleware","store","isConnected","dispatch","connectionChanged","messageReceived","next","socketState","getState","process","PORT","rootReducer","combineReducers","UserList","props","style","fontWeight","className","id","key","React","Component","MessageList","messageListRef","createRef","scrollToBottom","elementToBeScrolled","scrollTop","scrollHeight","apiCall","messageListElement","current","clientHeight","socketIOClient","ref","display","height","overflowY","padding","width","length","marginBottom","marginTop","includes","color","paddingLeft","ChatForm","keyPress","e","sendChatMessage","sendMessage","setState","sendChatMessageWithParams","updateUsername","event","currentTarget","value","changeUsername","updateMessage","connectSocket","userJoined","onKeyPress","placeholder","autoFocus","onClick","ChatPage","NotFound","AppRouter","exact","path","component","App","middlewares","thunk","middlewareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e0588e0.chunk.js","sourcesContent":["import {\r\n  SEND_MESSAGE_RESPONSE,\r\n  SEND_MESSAGE_REQUEST\r\n} from '../actions';\r\nimport { Message } from '../types';\r\n\r\ninterface State {\r\n  username: string;\r\n  messages: Message[];\r\n}\r\n\r\nconst initialState: State = {\r\n  username: `Guest${Math.floor(Math.random() * 1001)}`,\r\n  messages: []\r\n};\r\n\r\nexport function messageReducer(\r\n  state = initialState,\r\n  action: { type: string, message: Message }) {\r\n    switch (action.type) {\r\n      case SEND_MESSAGE_REQUEST:\r\n          return {\r\n            ...state,\r\n            messages: state.messages.concat(action.message)\r\n          };\r\n      case SEND_MESSAGE_RESPONSE:\r\n        return {\r\n          ...state,\r\n          messages: [...state.messages, action.message]\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};\r\n\r\nexport default messageReducer;","import { Message } from '../types';\r\n\r\nexport const SEND_MESSAGE_RESPONSE = 'SEND_MESSAGE_RESPONSE';\r\nexport const SEND_MESSAGE_REQUEST = 'SEND_MESSAGE_REQUEST';\r\n\r\nexport const messageReceived = (message: Message) => {\r\n  return {\r\n    type: SEND_MESSAGE_RESPONSE,\r\n    message\r\n  };\r\n};\r\n\r\nexport const sendMessage = (message: Message) => {\r\n  return {\r\n    type: SEND_MESSAGE_REQUEST,\r\n    message\r\n  };\r\n};","import { CONNECTION_CHANGED } from '../actions';\r\n\r\nconst initialState = {\r\n  connected: false\r\n};\r\n\r\nfunction socketReducer(state = initialState, action: { type: string, connected: boolean }) {\r\n  let reduced;\r\n  switch (action.type) {\r\n    case CONNECTION_CHANGED:\r\n      reduced = Object.assign({}, state, {\r\n        connected: action.connected,\r\n        isError: false\r\n      });\r\n      break;\r\n    default:\r\n      reduced = state;\r\n  }\r\n  return reduced;\r\n}\r\n\r\nexport default socketReducer;","export const CONNECTION_CHANGED = 'CONNECTION_CHANGED';\r\nexport const CONNECT_SOCKET = 'CONNECT_SOCKET';\r\n\r\nexport const connectionChanged = (isConnected: boolean) => {\r\n  return {\r\n    type: CONNECTION_CHANGED,\r\n    connected: isConnected,\r\n    isError: false\r\n  };\r\n};\r\n\r\nexport const connectSocket = (username: string) => {\r\n  return {\r\n    type: CONNECT_SOCKET,\r\n    username\r\n  };\r\n};","import {\r\n  USER_JOINED,\r\n  USER_LEFT,\r\n  CHANGE_USERNAME\r\n} from '../actions';\r\n\r\ninterface State {\r\n  usernames: string[];\r\n}\r\n\r\nconst initialState: State = {\r\n  usernames: []\r\n};\r\n\r\nexport function userReducer(\r\n  state = initialState,\r\n  action: { type: string, username: string }) {\r\n    switch (action.type) {\r\n      case USER_JOINED:\r\n        return {\r\n          usernames: state.usernames.concat(action.username)\r\n        };\r\n      case USER_LEFT:\r\n        return {\r\n          usernames: state.usernames.filter(username => username !== action.username)\r\n        };\r\n      case CHANGE_USERNAME:\r\n        return {\r\n          usernames: state.usernames.map(username => (username === action.username ? action.username : username))\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};\r\n\r\nexport default userReducer;","export const USER_JOINED = 'USER_JOINED';\r\nexport const USER_LEFT = 'USER_LEFT';\r\nexport const CHANGE_USERNAME = 'CHANGE_USERNAME';\r\n\r\nexport const userJoined = (username: string) => {\r\n  return {\r\n    type: USER_JOINED,\r\n    username\r\n  };\r\n};\r\n\r\nexport const userLeft = (username: string) => {\r\n  return {\r\n    type: USER_LEFT,\r\n    username\r\n  };\r\n};\r\n\r\nexport const changeUsername = (username: string) => {\r\n  return {\r\n    type: CHANGE_USERNAME,\r\n    username\r\n  };\r\n};","import * as io from 'socket.io-client';\r\nimport { Message } from '../../message/types';\r\n\r\nconst EVENTS = {\r\n  CONNECT: 'connect',\r\n  DISCONNECT: 'disconnect',\r\n  MESSAGE: 'message',\r\n  CHATBOT: 'chatbot',\r\n  UPDATE_USER_LIST: 'update_user_list'\r\n};\r\n\r\nexport default class Socket {\r\n  public username: string;\r\n  public port: string;\r\n  private onChange: (isConnected: boolean) => void;\r\n  private onMessage: (message: Message) => void;\r\n  private socket: any;\r\n\r\n  constructor(onChange: (isConnected: boolean) => void, onMessage: (message: Message) => void) {\r\n    this.onChange = onChange;\r\n    this.onMessage = onMessage;\r\n    this.socket = '';\r\n    this.username = '';\r\n    this.port = '';\r\n  };\r\n\r\n  public connect = (username: string, port: string) => {\r\n    this.username = username;\r\n    this.port = port;\r\n\r\n    // const host = `localhost:${port}`; // Running from local network\r\n    // this.socket = io.connect(host);\r\n    this.socket = io.connect(); // Running from Heroku\r\n\r\n    this.socket.on(EVENTS.CONNECT, this.onConnected);\r\n  };\r\n\r\n  public onConnected = () => {\r\n    this.socket.on(EVENTS.MESSAGE, this.onMessage);\r\n    this.onChange(true);\r\n\r\n    const helloMessage: Message = {\r\n      username: 'Chat Bot',\r\n      message: 'Hello ' + this.username + '! Change the nickname and start chatting.',\r\n      timestamp: new Date().getTime()\r\n    };\r\n\r\n    const joinMessage: Message = {\r\n      username: '',\r\n      message: `${this.username} joined the chat!`,\r\n      timestamp: new Date().getTime()\r\n    }\r\n\r\n    this.sendMessageToMe(helloMessage);\r\n    this.sendMessageToOthers(joinMessage);\r\n    this.updateUserList(joinMessage.username);\r\n    this.socket.on(EVENTS.DISCONNECT, this.disconnect);\r\n  };\r\n\r\n  public sendMessageToOthers = (message: Message) => {\r\n    if (typeof this.socket.emit === 'function') {\r\n      this.socket.emit(EVENTS.MESSAGE, message)\r\n    } else {\r\n      console.error('Cannot emit socket messages. Socket.io not connected.');\r\n    }\r\n  }\r\n\r\n  public sendMessageToMe = (message: Message) => {\r\n    if (typeof this.socket.emit === 'function') {\r\n      this.socket.emit(EVENTS.CHATBOT, message)\r\n    } else {\r\n      console.error('Cannot emit socket messages. Socket.io not connected.');\r\n    }\r\n  }\r\n\r\n  public updateUserList = (username: string) => {\r\n    if (typeof this.socket.emit === 'function') {\r\n      this.socket.emit(EVENTS.UPDATE_USER_LIST, username)\r\n    } else {\r\n      console.error('Cannot emit socket messages. Socket.io not connected.');\r\n    }\r\n  }\r\n\r\n  public disconnect = () => {\r\n    console.log(\"DISCONNECT\");\r\n    const leaveMessage: Message = {\r\n      username: '',\r\n      message: `${this.username} left the chat!`,\r\n      timestamp: new Date().getTime()\r\n    }\r\n    this.sendMessageToOthers(leaveMessage);\r\n    this.socket.close();\r\n  }\r\n}","import Socket from './Socket';\r\nimport { CONNECT_SOCKET, connectionChanged } from '../actions';\r\nimport { messageReceived, SEND_MESSAGE_REQUEST } from '../../message/actions';\r\nimport { Message } from '../../message/types';\r\n\r\nconst socketMiddleware = (store: any) => {\r\n\r\n  const onConnectionChange = (isConnected: boolean) => {\r\n    store.dispatch(connectionChanged(isConnected));\r\n  };\r\n\r\n  const onIncomingMessage = (message: Message) => {\r\n    console.log(\"TULEEX\");\r\n    store.dispatch(messageReceived(message));\r\n  };\r\n\r\n  const socket = new Socket(onConnectionChange, onIncomingMessage);\r\n\r\n  return (next: any) => (action: any) => {\r\n    const socketState = store.getState().socketReducer;\r\n\r\n    switch (action.type) {\r\n      case CONNECT_SOCKET:\r\n        socket.connect(action.username, process.env.PORT || socketState.port);\r\n        break;\r\n      \r\n      case SEND_MESSAGE_REQUEST:\r\n        socket.sendMessageToOthers(action.message);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    };\r\n    return next(action);\r\n  };\r\n};\r\n\r\nexport default socketMiddleware;","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport messageReducer from './message/reducer';\r\nimport socketReducer from './socket/reducer';\r\nimport userReducer from './user/reducer';\r\nimport socketMiddleware from './socket/middleware';\r\n\r\nconst rootReducer = combineReducers({\r\n  messageReducer: messageReducer,\r\n  socketReducer: socketReducer,\r\n  userReducer: userReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const middlewares = [thunk];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares, socketMiddleware);\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(middlewareEnhancer)\r\n  );\r\n\r\n  return store;\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface UserListState {\r\n  userReducer: {\r\n    usernames: string[];\r\n  }\r\n}\r\n\r\ninterface UserListProps {\r\n  usernames: string[];\r\n}\r\n\r\nexport class UserList extends React.Component<UserListProps> {\r\n  render() {\r\n    const { usernames } = this.props as UserListProps;\r\n    return (\r\n      <div>\r\n        <p style={{fontWeight: 'bold'}}>Users online:</p>\r\n        <ul className=\"user-list\" id=\"user-list\">\r\n          {usernames.map(username => (\r\n            <li key={username}>{username}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: UserListState) => ({\r\n  usernames: state.userReducer.usernames\r\n});\r\n\r\nexport default connect(mapStateToProps)(UserList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Message } from '../store/message/types';\r\nimport UserList from './UserList';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\ninterface MessageListState {\r\n  messageReducer: {\r\n    messages: Message[];\r\n  }\r\n}\r\n\r\ninterface MessageListProps {\r\n  messages: Message[];\r\n}\r\n\r\nexport class MessageList extends React.Component<MessageListProps, { apiCall: string }> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      apiCall: ''\r\n    }\r\n  }\r\n  \r\n  messageListRef = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate(): void {\r\n    const messageListElement: Element = this.messageListRef.current as Element;\r\n    const shouldScroll: boolean = messageListElement.scrollTop + messageListElement.clientHeight !== messageListElement.scrollHeight;\r\n\r\n    const socket = socketIOClient('/');\r\n    // socket.on('apiCall', (data: string) => this.setState({ apiCall: data }));\r\n    // if (shouldScroll) {\r\n    //   this.scrollToBottom(messageListElement);\r\n    // }\r\n  }\r\n\r\n  scrollToBottom = (elementToBeScrolled: Element): void => {\r\n    elementToBeScrolled.scrollTop = elementToBeScrolled.scrollHeight;\r\n  };\r\n\r\n  render() {\r\n    const { messages } = this.props as MessageListProps;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"message-list\" id=\"message-list\" ref={this.messageListRef} style={{ display: 'inline-block', height: 'calc(100vh - 200px)', overflowY: 'scroll', padding: '0 10px 0 10px', width: '50%' }}>\r\n          {messages.map((message: Message) => (\r\n            message.message ?\r\n              <div className=\"message-item\" key={message.timestamp}>\r\n                {message.username.length > 0\r\n                ?\r\n                  <div>\r\n                    <p className=\"message-from\" style={{ fontWeight: 'bold', marginBottom: 0 }}>{message.username}</p>\r\n                    <p style={{ marginTop: 0 }}>{message.message}</p>\r\n                  </div>\r\n                :\r\n                  message.message.includes(\"joined\")\r\n                  ?\r\n                    <p className=\"message-from joined-message\" style={{ marginTop: 0, color: 'green' }}>{message.message}</p>\r\n                  :\r\n                    message.message.includes(\"left\")\r\n                    ?\r\n                      <p className=\"message-from left-message\" style={{ marginTop: 0, color: 'red' }}>{message.message}</p>\r\n                    : null}\r\n              </div>\r\n            : null\r\n          ))}\r\n        </div>\r\n        <div style={{ display: 'inline-block', paddingLeft: '20px' }}>\r\n          <UserList />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: MessageListState) => ({\r\n  messages: state.messageReducer.messages\r\n});\r\n\r\nexport default connect(mapStateToProps)(MessageList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessage } from '../store/message/actions';\r\nimport { changeUsername } from '../store/user/actions';\r\nimport { Message } from '../store/message/types';\r\nimport { connectSocket } from '../store/socket/actions';\r\nimport { userJoined } from '../store/user/actions';\r\n\r\ninterface ChatFormProps {\r\n  sendMessage: (message: Message) => void;\r\n  changeUsername: (username: string) => void;\r\n  connectSocket: (username: string) => void;\r\n  userJoined: (username: string) => void;\r\n}\r\n\r\ntype UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\r\ntype UpdateUsernameParam = React.SyntheticEvent<{ value: string }>;\r\n\r\nexport class ChatForm extends React.Component<ChatFormProps> {\r\n  state = {\r\n    username: '',\r\n    message: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    const username = \"Guest\" + Math.floor(Math.random() * 1001);\r\n    this.setState({ username });\r\n\r\n    this.props.connectSocket(username);\r\n    this.props.userJoined(username);\r\n  }\r\n\r\n  keyPress = (e: React.KeyboardEvent<any>) => {\r\n    if (e.key === \"Enter\") {\r\n      this.sendChatMessage();\r\n    }\r\n  }\r\n\r\n  sendChatMessage = (): void => {\r\n    if (this.state.message !== '') {\r\n      this.props.sendMessage({\r\n        username: this.state.username,\r\n        message: this.state.message,\r\n        timestamp: new Date().getTime()\r\n      });\r\n      this.setState({ message: '' });\r\n    }\r\n  };\r\n\r\n  sendChatMessageWithParams = (message: Message) => {\r\n    this.props.sendMessage(message);\r\n  }\r\n\r\n  updateUsername = (event: UpdateUsernameParam) => {\r\n    this.setState({ username: event.currentTarget.value });\r\n    this.props.changeUsername(event.currentTarget.value);\r\n  }\r\n\r\n  updateMessage = (event: UpdateMessageParam) => {\r\n    this.setState({ message: event.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    const { username, message } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"chat-form\">\r\n          <input\r\n            id=\"nickname-input\"\r\n            value={username}\r\n            onChange={this.updateUsername}\r\n          />\r\n          <br />\r\n          <input\r\n            id=\"chat-input\"\r\n            value={message}\r\n            onChange={this.updateMessage}\r\n            onKeyPress={this.keyPress}\r\n            className=\"chat-input\"\r\n            placeholder=\"Type a message...\"\r\n            autoFocus\r\n          />\r\n          <button onClick={this.sendChatMessage} id=\"send-message-btn\">Send</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any): ChatFormProps => ({\r\n  sendMessage: (message: Message) => dispatch(sendMessage(message)),\r\n  changeUsername: (username: string) => dispatch(changeUsername(username)),\r\n  connectSocket: (username: string) => dispatch(connectSocket(username)),\r\n  userJoined: (username: string) => dispatch(userJoined(username))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ChatForm);","import React from 'react';\r\nimport MessageList from './MessageList';\r\nimport ChatForm from './ChatForm';\r\n\r\nconst ChatPage = () => {\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <MessageList />\r\n      <ChatForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatPage;","import React from 'react';\r\n\r\nconst NotFound: React.FC = () => <h1>Not found</h1>\r\n\r\nexport default NotFound","import React from 'react';\r\nimport ChatPage from '../components/ChatPage';\r\nimport NotFound from '../components/NotFound';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nclass AppRouter extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={ChatPage} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  };\r\n}\r\n\r\nexport default AppRouter;","import React from 'react';\nimport AppRouter from './routes/AppRouter';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <AppRouter />\n    );\n  };\n}\n\nexport default App;","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport App from './App';\n\nconst store = configureStore();\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}