{"version":3,"sources":["store/message/actions/index.tsx","store/message/reducer/index.tsx","store/socket/actions/index.tsx","store/socket/reducer/index.tsx","store/user/actions/index.tsx","store/user/reducer/index.tsx","store/socket/middleware/Socket.tsx","store/socket/middleware/index.tsx","store/index.tsx","components/UserList.tsx","components/MessageList.tsx","components/ChatForm.tsx","components/ChatPage.tsx","components/NotFound.tsx","routes/AppRouter.tsx","App.tsx","index.tsx"],"names":["SEND_MESSAGE_RESPONSE","SEND_MESSAGE_REQUEST","initialState","username","concat","Math","floor","random","messages","messageReducer","state","arguments","length","undefined","action","type","Object","objectSpread","message","toConsumableArray","CONNECTION_CHANGED","connected","port","socketReducer","reduced","assign","isError","USER_JOINED","USER_LEFT","CHANGE_USERNAME","usernames","userReducer","filter","map","EVENTS","Socket","onChange","onMessage","_this","this","classCallCheck","socket","connect","host","io","on","onConnected","helloMessage","timestamp","Date","getTime","joinMessage","sendMessageToMe","sendMessageToOthers","updateUserList","disconnect","emit","console","error","log","leaveMessage","close","socketMiddleware","store","isConnected","dispatch","connectionChanged","messageReceived","next","socketState","getState","process","PORT","rootReducer","combineReducers","UserList","_React$Component","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","props","react_default","a","createElement","style","fontWeight","className","id","React","Component","MessageList","call","messageListRef","createRef","scrollToBottom","elementToBeScrolled","scrollTop","scrollHeight","apiCall","messageListElement","current","clientHeight","socketIOClient","ref","display","height","overflowY","padding","width","marginBottom","marginTop","includes","color","paddingLeft","components_UserList","ChatForm","_getPrototypeOf2","_len","args","Array","_key","keyPress","e","sendChatMessage","sendMessage","setState","sendChatMessageWithParams","updateUsername","event","currentTarget","changeUsername","updateMessage","connectSocket","userJoined","_this$state","onKeyPress","placeholder","autoFocus","onClick","ChatPage","components_MessageList","components_ChatForm","NotFound","AppRouter","react_router_dom","react_router","exact","path","component","App","routes_AppRouter","middlewares","thunk","middlewareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4d3c5701.chunk.js","sourcesContent":["import { Message } from '../types';\r\n\r\nexport const SEND_MESSAGE_RESPONSE = 'SEND_MESSAGE_RESPONSE';\r\nexport const SEND_MESSAGE_REQUEST = 'SEND_MESSAGE_REQUEST';\r\n\r\nexport const messageReceived = (message: Message) => {\r\n  return {\r\n    type: SEND_MESSAGE_RESPONSE,\r\n    message\r\n  };\r\n};\r\n\r\nexport const sendMessage = (message: Message) => {\r\n  return {\r\n    type: SEND_MESSAGE_REQUEST,\r\n    message\r\n  };\r\n};","import {\r\n  SEND_MESSAGE_RESPONSE,\r\n  SEND_MESSAGE_REQUEST\r\n} from '../actions';\r\nimport { Message } from '../types';\r\n\r\ninterface State {\r\n  username: string;\r\n  messages: Message[];\r\n}\r\n\r\nconst initialState: State = {\r\n  username: `Guest${Math.floor(Math.random() * 1001)}`,\r\n  messages: []\r\n};\r\n\r\nexport function messageReducer(\r\n  state = initialState,\r\n  action: { type: string, message: Message }) {\r\n    switch (action.type) {\r\n      case SEND_MESSAGE_REQUEST:\r\n          return {\r\n            ...state,\r\n            messages: state.messages.concat(action.message)\r\n          };\r\n      case SEND_MESSAGE_RESPONSE:\r\n        return {\r\n          ...state,\r\n          messages: [...state.messages, action.message]\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};\r\n\r\nexport default messageReducer;","export const CONNECTION_CHANGED = 'CONNECTION_CHANGED';\r\nexport const CONNECT_SOCKET = 'CONNECT_SOCKET';\r\n\r\nexport const connectionChanged = (isConnected: boolean) => {\r\n  return {\r\n    type: CONNECTION_CHANGED,\r\n    connected: isConnected,\r\n    isError: false\r\n  };\r\n};\r\n\r\nexport const connectSocket = (username: string) => {\r\n  return {\r\n    type: CONNECT_SOCKET,\r\n    username\r\n  };\r\n};","import { CONNECTION_CHANGED } from '../actions';\r\n\r\nconst initialState = {\r\n  connected: false,\r\n  port: '3001'\r\n};\r\n\r\nfunction socketReducer(state = initialState, action: { type: string, port: string, connected: boolean }) {\r\n  let reduced;\r\n  switch (action.type) {\r\n    case CONNECTION_CHANGED:\r\n      reduced = Object.assign({}, state, {\r\n        connected: action.connected,\r\n        isError: false\r\n      });\r\n      break;\r\n    default:\r\n      reduced = state;\r\n  }\r\n  return reduced;\r\n}\r\n\r\nexport default socketReducer;","export const USER_JOINED = 'USER_JOINED';\r\nexport const USER_LEFT = 'USER_LEFT';\r\nexport const CHANGE_USERNAME = 'CHANGE_USERNAME';\r\n\r\nexport const userJoined = (username: string) => {\r\n  return {\r\n    type: USER_JOINED,\r\n    username\r\n  };\r\n};\r\n\r\nexport const userLeft = (username: string) => {\r\n  return {\r\n    type: USER_LEFT,\r\n    username\r\n  };\r\n};\r\n\r\nexport const changeUsername = (username: string) => {\r\n  return {\r\n    type: CHANGE_USERNAME,\r\n    username\r\n  };\r\n};","import {\r\n  USER_JOINED,\r\n  USER_LEFT,\r\n  CHANGE_USERNAME\r\n} from '../actions';\r\n\r\ninterface State {\r\n  usernames: string[];\r\n}\r\n\r\nconst initialState: State = {\r\n  usernames: []\r\n};\r\n\r\nexport function userReducer(\r\n  state = initialState,\r\n  action: { type: string, username: string }) {\r\n    switch (action.type) {\r\n      case USER_JOINED:\r\n        return {\r\n          usernames: state.usernames.concat(action.username)\r\n        };\r\n      case USER_LEFT:\r\n        return {\r\n          usernames: state.usernames.filter(username => username !== action.username)\r\n        };\r\n      case CHANGE_USERNAME:\r\n        return {\r\n          usernames: state.usernames.map(username => (username === action.username ? action.username : username))\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};\r\n\r\nexport default userReducer;","import * as io from 'socket.io-client';\r\nimport { Message } from '../../message/types';\r\n\r\nconst EVENTS = {\r\n  CONNECT: 'connect',\r\n  DISCONNECT: 'disconnect',\r\n  MESSAGE: 'message',\r\n  CHATBOT: 'chatbot',\r\n  UPDATE_USER_LIST: 'update_user_list'\r\n};\r\n\r\nexport default class Socket {\r\n  public username: string;\r\n  public port: string;\r\n  private onChange: (isConnected: boolean) => void;\r\n  private onMessage: (message: Message) => void;\r\n  private socket: any;\r\n\r\n  constructor(onChange: (isConnected: boolean) => void, onMessage: (message: Message) => void) {\r\n    this.onChange = onChange;\r\n    this.onMessage = onMessage;\r\n    this.socket = '';\r\n    this.username = '';\r\n    this.port = '';\r\n  };\r\n\r\n  public connect = (username: string, port: string) => {\r\n    this.username = username;\r\n    this.port = port;\r\n\r\n    const host = `localhost:${port}`; // Running from local network\r\n    this.socket = io.connect(host);\r\n    // this.socket = io.connect(); // Running from Heroku\r\n\r\n    this.socket.on(EVENTS.CONNECT, this.onConnected);\r\n  };\r\n\r\n  public onConnected = () => {\r\n    this.socket.on(EVENTS.MESSAGE, this.onMessage);\r\n    this.onChange(true);\r\n\r\n    const helloMessage: Message = {\r\n      username: 'Chat Bot',\r\n      message: 'Hello ' + this.username + '! Change the nickname and start chatting.',\r\n      timestamp: new Date().getTime()\r\n    };\r\n\r\n    const joinMessage: Message = {\r\n      username: '',\r\n      message: `${this.username} joined the chat!`,\r\n      timestamp: new Date().getTime()\r\n    }\r\n\r\n    this.sendMessageToMe(helloMessage);\r\n    this.sendMessageToOthers(joinMessage);\r\n    this.updateUserList(joinMessage.username);\r\n    this.socket.on(EVENTS.DISCONNECT, this.disconnect);\r\n  };\r\n\r\n  public sendMessageToOthers = (message: Message) => {\r\n    if (typeof this.socket.emit === 'function') {\r\n      this.socket.emit(EVENTS.MESSAGE, message)\r\n    } else {\r\n      console.error('Cannot emit socket messages. Socket.io not connected.');\r\n    }\r\n  }\r\n\r\n  public sendMessageToMe = (message: Message) => {\r\n    if (typeof this.socket.emit === 'function') {\r\n      this.socket.emit(EVENTS.CHATBOT, message)\r\n    } else {\r\n      console.error('Cannot emit socket messages. Socket.io not connected.');\r\n    }\r\n  }\r\n\r\n  public updateUserList = (username: string) => {\r\n    if (typeof this.socket.emit === 'function') {\r\n      this.socket.emit(EVENTS.UPDATE_USER_LIST, username)\r\n    } else {\r\n      console.error('Cannot emit socket messages. Socket.io not connected.');\r\n    }\r\n  }\r\n\r\n  public disconnect = () => {\r\n    console.log(\"DISCONNECT\");\r\n    const leaveMessage: Message = {\r\n      username: '',\r\n      message: `${this.username} left the chat!`,\r\n      timestamp: new Date().getTime()\r\n    }\r\n    this.sendMessageToOthers(leaveMessage);\r\n    this.socket.close();\r\n  }\r\n}","import Socket from './Socket';\r\nimport { CONNECT_SOCKET, connectionChanged } from '../actions';\r\nimport { messageReceived, SEND_MESSAGE_REQUEST } from '../../message/actions';\r\nimport { Message } from '../../message/types';\r\n\r\nconst socketMiddleware = (store: any) => {\r\n\r\n  const onConnectionChange = (isConnected: boolean) => {\r\n    store.dispatch(connectionChanged(isConnected));\r\n  };\r\n\r\n  const onIncomingMessage = (message: Message) => {\r\n    console.log(\"TULEEX\");\r\n    store.dispatch(messageReceived(message));\r\n  };\r\n\r\n  const socket = new Socket(onConnectionChange, onIncomingMessage);\r\n\r\n  return (next: any) => (action: any) => {\r\n    const socketState = store.getState().socketReducer;\r\n\r\n    switch (action.type) {\r\n      case CONNECT_SOCKET:\r\n        socket.connect(action.username, process.env.PORT || socketState.port);\r\n        break;\r\n      \r\n      case SEND_MESSAGE_REQUEST:\r\n        socket.sendMessageToOthers(action.message);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    };\r\n    return next(action);\r\n  };\r\n};\r\n\r\nexport default socketMiddleware;","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport messageReducer from './message/reducer';\r\nimport socketReducer from './socket/reducer';\r\nimport userReducer from './user/reducer';\r\nimport socketMiddleware from './socket/middleware';\r\n\r\nconst rootReducer = combineReducers({\r\n  messageReducer: messageReducer,\r\n  socketReducer: socketReducer,\r\n  userReducer: userReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const middlewares = [thunk];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares, socketMiddleware);\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(middlewareEnhancer)\r\n  );\r\n\r\n  return store;\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface UserListState {\r\n  userReducer: {\r\n    usernames: string[];\r\n  }\r\n}\r\n\r\ninterface UserListProps {\r\n  usernames: string[];\r\n}\r\n\r\nexport class UserList extends React.Component<UserListProps> {\r\n  render() {\r\n    const { usernames } = this.props as UserListProps;\r\n    return (\r\n      <div>\r\n        <p style={{fontWeight: 'bold'}}>Users online:</p>\r\n        <ul className=\"user-list\" id=\"user-list\">\r\n          {usernames.map(username => (\r\n            <li key={username}>{username}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: UserListState) => ({\r\n  usernames: state.userReducer.usernames\r\n});\r\n\r\nexport default connect(mapStateToProps)(UserList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Message } from '../store/message/types';\r\nimport UserList from './UserList';\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\ninterface MessageListState {\r\n  messageReducer: {\r\n    messages: Message[];\r\n  }\r\n}\r\n\r\ninterface MessageListProps {\r\n  messages: Message[];\r\n}\r\n\r\nexport class MessageList extends React.Component<MessageListProps, { apiCall: string }> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      apiCall: ''\r\n    }\r\n  }\r\n  \r\n  messageListRef = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate(): void {\r\n    const messageListElement: Element = this.messageListRef.current as Element;\r\n    const shouldScroll: boolean = messageListElement.scrollTop + messageListElement.clientHeight !== messageListElement.scrollHeight;\r\n\r\n    const socket = socketIOClient('http://localhost:3001/');\r\n    // socket.on('apiCall', (data: string) => this.setState({ apiCall: data }));\r\n    // if (shouldScroll) {\r\n    //   this.scrollToBottom(messageListElement);\r\n    // }\r\n  }\r\n\r\n  scrollToBottom = (elementToBeScrolled: Element): void => {\r\n    elementToBeScrolled.scrollTop = elementToBeScrolled.scrollHeight;\r\n  };\r\n\r\n  render() {\r\n    const { messages } = this.props as MessageListProps;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"message-list\" id=\"message-list\" ref={this.messageListRef} style={{ display: 'inline-block', height: 'calc(100vh - 200px)', overflowY: 'scroll', padding: '0 10px 0 10px', width: '50%' }}>\r\n          {messages.map((message: Message) => (\r\n            message.message ?\r\n              <div className=\"message-item\" key={message.timestamp}>\r\n                {message.username.length > 0\r\n                ?\r\n                  <div>\r\n                    <p className=\"message-from\" style={{ fontWeight: 'bold', marginBottom: 0 }}>{message.username}</p>\r\n                    <p style={{ marginTop: 0 }}>{message.message}</p>\r\n                  </div>\r\n                :\r\n                  message.message.includes(\"joined\")\r\n                  ?\r\n                    <p className=\"message-from joined-message\" style={{ marginTop: 0, color: 'green' }}>{message.message}</p>\r\n                  :\r\n                    message.message.includes(\"left\")\r\n                    ?\r\n                      <p className=\"message-from left-message\" style={{ marginTop: 0, color: 'red' }}>{message.message}</p>\r\n                    : null}\r\n              </div>\r\n            : null\r\n          ))}\r\n        </div>\r\n        <div style={{ display: 'inline-block', paddingLeft: '20px' }}>\r\n          <UserList />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: MessageListState) => ({\r\n  messages: state.messageReducer.messages\r\n});\r\n\r\nexport default connect(mapStateToProps)(MessageList);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessage } from '../store/message/actions';\r\nimport { changeUsername } from '../store/user/actions';\r\nimport { Message } from '../store/message/types';\r\nimport { connectSocket } from '../store/socket/actions';\r\nimport { userJoined } from '../store/user/actions';\r\n\r\ninterface ChatFormProps {\r\n  sendMessage: (message: Message) => void;\r\n  changeUsername: (username: string) => void;\r\n  connectSocket: (username: string) => void;\r\n  userJoined: (username: string) => void;\r\n}\r\n\r\ntype UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\r\ntype UpdateUsernameParam = React.SyntheticEvent<{ value: string }>;\r\n\r\nexport class ChatForm extends React.Component<ChatFormProps> {\r\n  state = {\r\n    username: '',\r\n    message: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    const username = \"Guest\" + Math.floor(Math.random() * 1001);\r\n    this.setState({ username });\r\n\r\n    this.props.connectSocket(username);\r\n    this.props.userJoined(username);\r\n  }\r\n\r\n  keyPress = (e: React.KeyboardEvent<any>) => {\r\n    if (e.key === \"Enter\") {\r\n      this.sendChatMessage();\r\n    }\r\n  }\r\n\r\n  sendChatMessage = (): void => {\r\n    if (this.state.message !== '') {\r\n      this.props.sendMessage({\r\n        username: this.state.username,\r\n        message: this.state.message,\r\n        timestamp: new Date().getTime()\r\n      });\r\n      this.setState({ message: '' });\r\n    }\r\n  };\r\n\r\n  sendChatMessageWithParams = (message: Message) => {\r\n    this.props.sendMessage(message);\r\n  }\r\n\r\n  updateUsername = (event: UpdateUsernameParam) => {\r\n    this.setState({ username: event.currentTarget.value });\r\n    this.props.changeUsername(event.currentTarget.value);\r\n  }\r\n\r\n  updateMessage = (event: UpdateMessageParam) => {\r\n    this.setState({ message: event.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    const { username, message } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"chat-form\">\r\n          <input\r\n            id=\"nickname-input\"\r\n            value={username}\r\n            onChange={this.updateUsername}\r\n          />\r\n          <br />\r\n          <input\r\n            id=\"chat-input\"\r\n            value={message}\r\n            onChange={this.updateMessage}\r\n            onKeyPress={this.keyPress}\r\n            className=\"chat-input\"\r\n            placeholder=\"Type a message...\"\r\n            autoFocus\r\n          />\r\n          <button onClick={this.sendChatMessage} id=\"send-message-btn\">Send</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any): ChatFormProps => ({\r\n  sendMessage: (message: Message) => dispatch(sendMessage(message)),\r\n  changeUsername: (username: string) => dispatch(changeUsername(username)),\r\n  connectSocket: (username: string) => dispatch(connectSocket(username)),\r\n  userJoined: (username: string) => dispatch(userJoined(username))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ChatForm);","import React from 'react';\r\nimport MessageList from './MessageList';\r\nimport ChatForm from './ChatForm';\r\n\r\nconst ChatPage = () => {\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <MessageList />\r\n      <ChatForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatPage;","import React from 'react';\r\n\r\nconst NotFound: React.FC = () => <h1>Not found</h1>\r\n\r\nexport default NotFound","import React from 'react';\r\nimport ChatPage from '../components/ChatPage';\r\nimport NotFound from '../components/NotFound';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nclass AppRouter extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={ChatPage} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  };\r\n}\r\n\r\nexport default AppRouter;","import React from 'react';\nimport AppRouter from './routes/AppRouter';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <AppRouter />\n    );\n  };\n}\n\nexport default App;","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport App from './App';\n\nconst store = configureStore();\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}