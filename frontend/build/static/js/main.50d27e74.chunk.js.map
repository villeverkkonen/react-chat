{"version":3,"sources":["store/message/types.tsx","store/message/reducer.tsx","store/nickname/types.tsx","store/nickname/reducer.tsx","store/index.tsx","components/UserList.tsx","components/MessageList.tsx","components/ChatForm.tsx","store/message/actions.tsx","components/ChatPage.tsx","components/NotFound.tsx","routes/AppRouter.tsx","App.tsx","index.tsx"],"names":["SEND_MESSAGE","initialState","messages","messageReducer","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","payload","CHANGE_NICKNAME","nickname","Math","floor","random","rootReducer","combineReducers","nicknameReducer","UserList","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","react_default","a","createElement","style","fontWeight","className","id","React","Component","MessageList","_getPrototypeOf2","_this","_len","args","Array","_key","call","messageListRef","createRef","scrollToBottom","elementToBeScrolled","scrollTop","scrollHeight","messageListElement","current","clientHeight","props","ref","display","height","overflowY","padding","width","map","message","timestamp","marginBottom","user","marginTop","paddingLeft","components_UserList","connect","ChatForm","keyPress","e","sendChatMessage","sendMessage","Date","getTime","setState","sendChatMessageWithParams","updateUser","event","currentTarget","updateMessage","_this$state","onChange","onKeyPress","placeholder","autoFocus","onClick","dispatch","ChatPage","components_MessageList","components_ChatForm","NotFound","AppRouter","react_router_dom","react_router","exact","path","component","App","routes_AppRouter","store","middlewares","thunk","middlewareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.50d27e74.chunk.js","sourcesContent":["export interface Message {\r\n  user: string;\r\n  message: string;\r\n  timestamp: number;\r\n};\r\n\r\nexport interface MessageState {\r\n  messages: Message[];\r\n};\r\n\r\nexport const SEND_MESSAGE: string = 'SEND_MESSAGE';\r\n\r\ninterface SendMessageAction {\r\n  type: typeof SEND_MESSAGE;\r\n  payload: Message;\r\n};\r\n\r\nexport type MessageActionTypes = SendMessageAction;","import {\r\n  MessageState,\r\n  SEND_MESSAGE,\r\n  MessageActionTypes\r\n} from './types';\r\n\r\nconst initialState: MessageState = {\r\n  messages: [\r\n    // {\r\n    //   user: 'Chat Bot',\r\n    //   message: 'Testi 1',\r\n    //   timestamp: new Date().getTime()\r\n    // },\r\n    // {\r\n    //   user: 'Chat Bot',\r\n    //   message: 'Testi 2',\r\n    //   timestamp: new Date().getTime()\r\n    // }\r\n  ]\r\n};\r\n\r\nexport function messageReducer(\r\n  state = initialState,\r\n  action: MessageActionTypes\r\n): MessageState {\r\n    switch (action.type) {\r\n      case SEND_MESSAGE:\r\n        return {\r\n          messages: [...state.messages, action.payload]\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};\r\n\r\nexport default messageReducer;","export interface NicknameState {\r\n  nickname: string;\r\n};\r\n\r\nexport const CHANGE_NICKNAME: string = 'CHANGE_NICKNAME';\r\n\r\ninterface ChangeNicknameAction {\r\n  type: typeof CHANGE_NICKNAME;\r\n  payload: string;\r\n};\r\n\r\nexport type NicknameActionTypes = ChangeNicknameAction;","   \r\nimport {\r\n  NicknameState,\r\n  CHANGE_NICKNAME,\r\n  NicknameActionTypes\r\n} from './types';\r\n\r\nconst initialState: NicknameState = {\r\n  nickname: 'Guest' + Math.floor(Math.random() * 1001)\r\n};\r\n\r\nexport function nicknameReducer(\r\n  state = initialState,\r\n  action: NicknameActionTypes\r\n): NicknameState {\r\n    switch (action.type) {\r\n      case CHANGE_NICKNAME:\r\n        return {\r\n          nickname: action.payload\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { messageReducer } from './message/reducer';\r\nimport { nicknameReducer } from './nickname/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  nicknameReducer: nicknameReducer,\r\n  messageReducer: messageReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const middlewares = [thunk];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(middlewareEnhancer)\r\n  );\r\n\r\n  return store;\r\n};","import React from 'react';\r\n\r\nexport class UserList extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <p style={{fontWeight: 'bold'}}>Users online:</p>\r\n        <ul className=\"user-list\" id=\"user-list\"></ul>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default UserList;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Message } from '../store/message/types';\r\nimport UserList from './UserList';\r\n\r\ninterface MessageListState {\r\n  messageReducer: {\r\n    messages: [];\r\n  }\r\n}\r\n\r\ninterface MessageListProps {\r\n  messages: [];\r\n}\r\n\r\nexport class MessageList extends React.Component {\r\n  messageListRef = React.createRef<HTMLDivElement>();\r\n\r\n  componentDidUpdate(): void {\r\n    const messageListElement: Element = this.messageListRef.current as Element;\r\n    const shouldScroll: boolean = messageListElement.scrollTop + messageListElement.clientHeight !== messageListElement.scrollHeight;\r\n\r\n    if (shouldScroll) {\r\n      this.scrollToBottom(messageListElement);\r\n    }\r\n  }\r\n\r\n  scrollToBottom = (elementToBeScrolled: Element): void => {\r\n    elementToBeScrolled.scrollTop = elementToBeScrolled.scrollHeight;\r\n  };\r\n\r\n  render() {\r\n    const { messages } = this.props as MessageListProps;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"message-list\" id=\"message-list\" ref={this.messageListRef} style={{ display: 'inline-block', height: 'calc(100vh - 200px)', overflowY: 'scroll', padding: '0 10px 0 10px', width: '50%' }}>\r\n          {messages.map((message: Message) => (\r\n            <div className=\"message-item\" key={message.timestamp}>\r\n              <p className=\"message-from\" style={{ fontWeight: 'bold', marginBottom: 0 }}>From: {message.user}</p>\r\n              <p style={{ marginTop: 0 }}>{message.message}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div style={{ display: 'inline-block', paddingLeft: '20px' }}>\r\n          <UserList />\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nconst mapStateToProps = (state: MessageListState) => ({\r\n  messages: state.messageReducer.messages\r\n});\r\n\r\nexport default connect(mapStateToProps)(MessageList);","import React from 'react';\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { sendMessage } from '../store/message/actions';\r\nimport { Message } from '../store/message/types';\r\nimport messageReducer from '../store/message/reducer';\r\n\r\ninterface ChatFormProps {\r\n  sendMessage: (message: Message) => void;\r\n}\r\n\r\ntype UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\r\ntype UpdateNicknameParam = React.SyntheticEvent<{ value: string }>;\r\n\r\nexport class ChatForm extends React.Component<ChatFormProps> {\r\n  state = {\r\n    user: '',\r\n    message: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    const user = \"Guest\" + Math.floor(Math.random() * 1001);\r\n    this.setState({ user });\r\n\r\n    this.sendChatMessageWithParams({\r\n      user: 'Chat Bot',\r\n      message: 'Hello ' + user + '! Change the nickname and start chatting.',\r\n      timestamp: new Date().getTime()\r\n    });\r\n  }\r\n\r\n  keyPress = (e: React.KeyboardEvent<any>) => {\r\n    if (e.key === \"Enter\") {\r\n      this.sendChatMessage();\r\n    }\r\n  }\r\n\r\n  sendChatMessage = (): void => {\r\n    if (this.state.message !== '') {\r\n      this.props.sendMessage({\r\n        user: this.state.user,\r\n        message: this.state.message,\r\n        timestamp: new Date().getTime()\r\n      });\r\n      this.setState({ message: '' });\r\n    }\r\n  };\r\n\r\n  sendChatMessageWithParams = (message: Message) => {\r\n    this.props.sendMessage(message);\r\n  }\r\n\r\n  updateUser = (event: UpdateNicknameParam) => {\r\n    this.setState({ user: event.currentTarget.value });\r\n  }\r\n\r\n  updateMessage = (event: UpdateMessageParam) => {\r\n    this.setState({ message: event.currentTarget.value });\r\n  };\r\n\r\n  render() {\r\n    const { user, message } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"chat-form\">\r\n          <input\r\n            id=\"nickname-input\"\r\n            value={user}\r\n            onChange={this.updateUser}\r\n          />\r\n          <br />\r\n          <input\r\n            id=\"chat-input\"\r\n            value={message}\r\n            onChange={this.updateMessage}\r\n            onKeyPress={this.keyPress}\r\n            className=\"chat-input\"\r\n            placeholder=\"Type a message...\"\r\n            autoFocus\r\n          />\r\n          <button onClick={this.sendChatMessage} id=\"send-message-btn\">Send</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any): ChatFormProps => ({\r\n  sendMessage: (message: Message) => dispatch(sendMessage(message))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ChatForm);","import { Message, SEND_MESSAGE, MessageActionTypes } from './types';\r\n\r\nexport function sendMessage(newMessage: Message): MessageActionTypes {\r\n  return {\r\n    type: SEND_MESSAGE,\r\n    payload: newMessage\r\n  };\r\n}","import React from 'react';\r\nimport MessageList from './MessageList';\r\nimport ChatForm from './ChatForm';\r\n\r\nconst ChatPage = () => {\r\n  return (\r\n    <div className=\"chat-page\">\r\n      <MessageList />\r\n      <ChatForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatPage;","import React from 'react';\r\n\r\nconst NotFound: React.FC = () => <h1>Not found</h1>\r\n\r\nexport default NotFound","import React from 'react';\r\nimport ChatPage from '../components/ChatPage';\r\nimport NotFound from '../components/NotFound';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nclass AppRouter extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={ChatPage} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  };\r\n}\r\n\r\nexport default AppRouter;","import React from 'react';\nimport AppRouter from './routes/AppRouter';\nimport MessageList from './components/MessageList';\nimport ChatForm from './components/ChatForm';\nimport { AppState } from './store';\nimport { changeNickname } from './store/nickname/actions';\nimport { sendMessage } from './store/message/actions';\nimport { NicknameState } from './store/nickname/types';\nimport { MessageState } from './store/message/types';\nimport { connect } from 'react-redux';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <AppRouter />\n    );\n  };\n}\n\nexport default App;\n\n// interface AppProps {\n//   sendMessage: typeof sendMessage;\n//   nicknameReducer: NicknameState;\n//   messageReducer: MessageState;\n// };\n\n// export type UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\n// export type UpdateNicknameParam = React.SyntheticEvent<{ value: string }>;\n\n// class App extends React.Component<AppProps> {\n//   state = {\n//     message: '',\n//     nickname: ''\n//   };\n\n//   componentDidMount() {\n//     const nickname = \"Guest\" + Math.floor(Math.random() * 1001);\n//     this.setState({ nickname });\n\n//     this.props.sendMessage({\n//       user: 'Chat Bot',\n//       message: 'Hello ' + nickname + '!',\n//       timestamp: new Date().getTime()\n//     });\n//   }\n\n//   updateNickname = (event: UpdateNicknameParam) => {\n//     this.setState({ nickname: event.currentTarget.value });\n//   }\n\n//   updateMessage = (event: UpdateMessageParam) => {\n//     this.setState({ message: event.currentTarget.value });\n//   };\n\n//   sendMessage = (message: string) => {\n//     this.props.sendMessage({\n//       user: this.state.nickname,\n//       message: message,\n//       timestamp: new Date().getTime()\n//     });\n//     this.setState({ message: '' });\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"parent\">\n//         <MessageList messageReducer={this.props.messageReducer} />\n//         <ChatForm\n//           nickname={this.state.nickname}\n//           message={this.state.message}\n//           sendMessage={this.sendMessage}\n//           updateMessage={this.updateMessage}\n//           updateNickname={this.updateNickname}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// const mapStateToProps = (state: AppState) => ({\n//   nicknameReducer: state.nicknameReducer,\n//   messageReducer: state.messageReducer\n// });\n\n// export default connect(\n//   mapStateToProps,\n//   { changeNickname, sendMessage }\n// )(App);","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\nimport App from './App';\n\nconst store = configureStore();\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}