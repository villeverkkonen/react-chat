{"version":3,"sources":["components/MessageList.tsx","components/ChatForm.tsx","store/chat/types.tsx","App.tsx","store/chat/actions.tsx","components/NotFound.tsx","routes/Routes.tsx","store/chat/reducers.tsx","store/index.tsx","index.tsx"],"names":["MessageList","_ref","messages","react_default","a","createElement","className","id","map","message","key","timestamp","user","ChatForm","userName","sendMessage","updateMessage","send","value","onChange","onKeyPress","e","placeholder","onClick","SEND_MESSAGE","App","state","event","_this","setState","currentTarget","props","Date","getTime","this","components_MessageList","chat","components_ChatForm","React","Component","connect","newMessage","type","payload","NotFound","Routes","react_router_dom","react_router","exact","path","component","initialState","rootReducer","combineReducers","arguments","length","undefined","action","concat","Object","toConsumableArray","store","middlewares","thunk","middlewareEnhancer","applyMiddleware","apply","createStore","composeWithDevTools","configureStore","ReactDOM","render","es","routes_Routes","document","getElementById"],"mappings":"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","file":"static/js/main.6c02f217.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Message } from '../store/chat/types';\r\n\r\ninterface MessageListProps {\r\n  messages: Message[];\r\n}\r\n\r\nconst MessageList: React.SFC<MessageListProps> = ({ messages }) => {\r\n  return (\r\n    <div className=\"message-list\" id=\"message-list\">\r\n      {messages.map(message => (\r\n        <div className=\"message-item\" key={message.timestamp}>\r\n          <h3>From: {message.user}</h3>\r\n          <p>{message.message}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageList;","import React from 'react';\r\nimport { UpdateMessageParam } from '../App';\r\n\r\ninterface ChatInterfaceProps {\r\n  message: string;\r\n  userName: string;\r\n  sendMessage: (message: string) => void;\r\n  updateMessage: (event: UpdateMessageParam) => void;\r\n}\r\n\r\nconst ChatForm: React.SFC<ChatInterfaceProps> = ({\r\n  userName,\r\n  message,\r\n  sendMessage,\r\n  updateMessage\r\n}) => {\r\n  function keyPress(e: React.KeyboardEvent<any>) {\r\n    if (e.key === \"Enter\") {\r\n      send();\r\n    }\r\n  }\r\n\r\n  function send() {\r\n    sendMessage(message);\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-form\">\r\n      <input\r\n        value={message}\r\n        onChange={updateMessage}\r\n        onKeyPress={keyPress}\r\n        className=\"chat-input\"\r\n        placeholder=\"Type a message...\"\r\n        id=\"chat-input\"\r\n      />\r\n      <button onClick={send} id=\"send-message-btn\">Send</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatForm;","export interface Message {\r\n  user: string;\r\n  message: string;\r\n  timestamp: number;\r\n};\r\n\r\nexport interface ChatState {\r\n  messages: Message[];\r\n};\r\n\r\nexport const SEND_MESSAGE: string = 'SEND_MESSAGE';\r\n\r\ninterface SendMessageAction {\r\n  type: typeof SEND_MESSAGE;\r\n  payload: Message;\r\n};\r\n\r\nexport type ChatActionTypes = SendMessageAction;","import React from 'react';\nimport MessageList from './components/MessageList';\nimport ChatForm from './components/ChatForm';\nimport { AppState } from './store';\nimport { sendMessage } from './store/chat/actions';\nimport { ChatState } from './store/chat/types';\nimport { connect } from 'react-redux';\n\ninterface AppProps {\n  sendMessage: typeof sendMessage;\n  chat: ChatState;\n};\n\nexport type UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\n\nclass App extends React.Component<AppProps> {\n  state = {\n    message: ''\n  };\n\n  componentDidMount() {\n    this.props.sendMessage({\n      user: 'Chat Bot',\n      message:\n        'Hello!',\n      timestamp: new Date().getTime()\n    });\n  }\n\n  updateMessage = (event: UpdateMessageParam) => {\n    this.setState({ message: event.currentTarget.value });\n  };\n\n  sendMessage = (message: string) => {\n    this.props.sendMessage({\n      user: 'Guest',\n      message: message,\n      timestamp: new Date().getTime()\n    });\n    this.setState({ message: '' });\n  };\n\n  render() {\n    return (\n      <div className=\"parent\">\n        <MessageList messages={this.props.chat.messages} />\n        <ChatForm\n          userName='Guest'\n          message={this.state.message}\n          updateMessage={this.updateMessage}\n          sendMessage={this.sendMessage}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  chat: state.chat\n});\n\nexport default connect(\n  mapStateToProps,\n  { sendMessage }\n)(App);","import { Message, SEND_MESSAGE, ChatActionTypes } from './types';\r\n\r\nexport function sendMessage(newMessage: Message): ChatActionTypes {\r\n  return {\r\n    type: SEND_MESSAGE,\r\n    payload: newMessage\r\n  };\r\n}","import React from 'react';\r\n\r\nconst NotFound: React.FC = () => <h1>Not found</h1>\r\n\r\nexport default NotFound","import React from 'react';\r\nimport App from '../App';\r\nimport NotFound from '../components/NotFound';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Routes;","import {\r\n  ChatState,\r\n  SEND_MESSAGE,\r\n  ChatActionTypes\r\n} from './types';\r\n\r\nconst initialState: ChatState = {\r\n  messages: []\r\n};\r\n\r\nexport function chatReducer(\r\n  state = initialState,\r\n  action: ChatActionTypes\r\n): ChatState {\r\n    switch (action.type) {\r\n      case SEND_MESSAGE:\r\n        return {\r\n          messages: [...state.messages, action.payload]\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { chatReducer } from './chat/reducers';\r\n\r\nconst rootReducer = combineReducers({\r\n  chat: chatReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const middlewares = [thunk];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(middlewareEnhancer)\r\n  );\r\n\r\n  return store;\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './routes/Routes';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Routes />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}