{"version":3,"sources":["components/MessageList.tsx","components/ChatForm.tsx","store/nickname/types.tsx","store/message/types.tsx","App.tsx","store/nickname/actions.tsx","store/message/actions.tsx","components/NotFound.tsx","routes/Routes.tsx","store/message/reducer.tsx","store/nickname/reducer.tsx","store/index.tsx","index.tsx"],"names":["MessageList","_ref","messages","react_default","a","createElement","className","id","map","message","key","timestamp","style","fontWeight","marginBottom","user","marginTop","ChatForm","nickname","sendMessage","updateMessage","updateNickname","send","value","onChange","onKeyPress","e","placeholder","onClick","CHANGE_NICKNAME","SEND_MESSAGE","App","state","event","_this","setState","currentTarget","props","Date","getTime","Math","floor","random","this","components_MessageList","messageReducer","components_ChatForm","React","Component","connect","nicknameReducer","changeNickname","newNickname","type","payload","newMessage","NotFound","Routes","react_router_dom","react_router","exact","path","component","initialState","rootReducer","combineReducers","arguments","length","undefined","action","concat","Object","toConsumableArray","store","middlewares","thunk","middlewareEnhancer","applyMiddleware","apply","createStore","composeWithDevTools","configureStore","render","es","routes_Routes","document","getElementById"],"mappings":"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","file":"static/js/main.41474894.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Message } from '../store/message/types';\r\n\r\ninterface MessageListProps {\r\n  messages: Message[];\r\n}\r\n\r\nconst MessageList: React.SFC<MessageListProps> = ({ messages }) => {\r\n  return (\r\n    <div className=\"message-list\" id=\"message-list\">\r\n      {messages.map(message => (\r\n        <div className=\"message-item\" key={message.timestamp}>\r\n          <p className=\"message-from\" style={{ fontWeight: 'bold', marginBottom: 0 }}>From: {message.user}</p>\r\n          <p style={{ marginTop: 0 }}>{message.message}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageList;","import React from 'react';\r\nimport { UpdateMessageParam } from '../App';\r\nimport { UpdateNicknameParam } from '../App';\r\n\r\ninterface ChatInterfaceProps {\r\n  nickname: string;\r\n  message: string;\r\n  sendMessage: (message: string) => void;\r\n  updateMessage: (event: UpdateMessageParam) => void;\r\n  updateNickname: (event: UpdateNicknameParam) => void;\r\n}\r\n\r\nconst ChatForm: React.SFC<ChatInterfaceProps> = ({\r\n  nickname,\r\n  message,\r\n  sendMessage,\r\n  updateMessage,\r\n  updateNickname\r\n}) => {\r\n  function keyPress(e: React.KeyboardEvent<any>) {\r\n    if (e.key === \"Enter\") {\r\n      send();\r\n    }\r\n  }\r\n\r\n  function send() {\r\n    sendMessage(message);\r\n  }\r\n\r\n  return (\r\n    <div className=\"chat-form\">\r\n      <input\r\n        id=\"nickname-input\"\r\n        value={nickname}\r\n        onChange={updateNickname}\r\n      />\r\n      <br />\r\n      <input\r\n        id=\"chat-input\"\r\n        value={message}\r\n        onChange={updateMessage}\r\n        onKeyPress={keyPress}\r\n        className=\"chat-input\"\r\n        placeholder=\"Type a message...\"\r\n      />\r\n      <button onClick={send} id=\"send-message-btn\">Send</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatForm;","export interface NicknameState {\r\n  nickname: string;\r\n};\r\n\r\nexport const CHANGE_NICKNAME: string = 'CHANGE_NICKNAME';\r\n\r\ninterface ChangeNicknameAction {\r\n  type: typeof CHANGE_NICKNAME;\r\n  payload: string;\r\n};\r\n\r\nexport type NicknameActionTypes = ChangeNicknameAction;","export interface Message {\r\n  user: string;\r\n  message: string;\r\n  timestamp: number;\r\n};\r\n\r\nexport interface MessageState {\r\n  messages: Message[];\r\n};\r\n\r\nexport const SEND_MESSAGE: string = 'SEND_MESSAGE';\r\n\r\ninterface SendMessageAction {\r\n  type: typeof SEND_MESSAGE;\r\n  payload: Message;\r\n};\r\n\r\nexport type MessageActionTypes = SendMessageAction;","import React from 'react';\nimport MessageList from './components/MessageList';\nimport ChatForm from './components/ChatForm';\nimport { AppState } from './store';\nimport { changeNickname } from './store/nickname/actions';\nimport { sendMessage } from './store/message/actions';\nimport { NicknameState } from './store/nickname/types';\nimport { MessageState } from './store/message/types';\nimport { connect } from 'react-redux';\n\ninterface AppProps {\n  sendMessage: typeof sendMessage;\n  nicknameReducer: NicknameState;\n  messageReducer: MessageState;\n};\n\nexport type UpdateMessageParam = React.SyntheticEvent<{ value: string }>;\nexport type UpdateNicknameParam = React.SyntheticEvent<{ value: string }>;\n\nclass App extends React.Component<AppProps> {\n  state = {\n    message: '',\n    nickname: ''\n  };\n\n  componentDidMount() {\n    const nickname = \"Guest\" + Math.floor(Math.random() * 1001);\n    this.setState({ nickname });\n\n    this.props.sendMessage({\n      user: 'Chat Bot',\n      message:\n        'Hello ' + nickname + '!',\n      timestamp: new Date().getTime()\n    });\n  }\n\n  updateNickname = (event: UpdateNicknameParam) => {\n    this.setState({ nickname: event.currentTarget.value });\n  }\n\n  updateMessage = (event: UpdateMessageParam) => {\n    this.setState({ message: event.currentTarget.value });\n  };\n\n  sendMessage = (message: string) => {\n    this.props.sendMessage({\n      user: this.state.nickname,\n      message: message,\n      timestamp: new Date().getTime()\n    });\n    this.setState({ message: '' });\n  };\n\n  render() {\n    return (\n      <div className=\"parent\">\n        <MessageList messages={this.props.messageReducer.messages} />\n        <ChatForm\n          nickname={this.state.nickname}\n          message={this.state.message}\n          sendMessage={this.sendMessage}\n          updateMessage={this.updateMessage}\n          updateNickname={this.updateNickname}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  nicknameReducer: state.nicknameReducer,\n  messageReducer: state.messageReducer\n});\n\nexport default connect(\n  mapStateToProps,\n  { changeNickname, sendMessage }\n)(App);","import { CHANGE_NICKNAME, NicknameActionTypes } from './types';\r\n\r\nexport function changeNickname(newNickname: string): NicknameActionTypes {\r\n  return {\r\n    type: CHANGE_NICKNAME,\r\n    payload: newNickname\r\n  }\r\n}","import { Message, SEND_MESSAGE, MessageActionTypes } from './types';\r\n\r\nexport function sendMessage(newMessage: Message): MessageActionTypes {\r\n  return {\r\n    type: SEND_MESSAGE,\r\n    payload: newMessage\r\n  };\r\n}","import React from 'react';\r\n\r\nconst NotFound: React.FC = () => <h1>Not found</h1>\r\n\r\nexport default NotFound","import React from 'react';\r\nimport App from '../App';\r\nimport NotFound from '../components/NotFound';\r\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\n\r\nclass Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n            <Route exact path=\"/\" component={App} />\r\n            <Route component={NotFound} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  };\r\n}\r\n\r\nexport default Routes;","import {\r\n  MessageState,\r\n  SEND_MESSAGE,\r\n  MessageActionTypes\r\n} from './types';\r\n\r\nconst initialState: MessageState = {\r\n  messages: []\r\n};\r\n\r\nexport function messageReducer(\r\n  state = initialState,\r\n  action: MessageActionTypes\r\n): MessageState {\r\n    switch (action.type) {\r\n      case SEND_MESSAGE:\r\n        return {\r\n          messages: [...state.messages, action.payload]\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};","   \r\nimport {\r\n  NicknameState,\r\n  CHANGE_NICKNAME,\r\n  NicknameActionTypes\r\n} from './types';\r\n\r\nconst initialState: NicknameState = {\r\n  nickname: ''\r\n};\r\n\r\nexport function nicknameReducer(\r\n  state = initialState,\r\n  action: NicknameActionTypes\r\n): NicknameState {\r\n    switch (action.type) {\r\n      case CHANGE_NICKNAME:\r\n        return {\r\n          nickname: action.payload\r\n        };\r\n      default:\r\n        return state;\r\n    };\r\n};","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { messageReducer } from './message/reducer';\r\nimport { nicknameReducer } from './nickname/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  nicknameReducer: nicknameReducer,\r\n  messageReducer: messageReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const middlewares = [thunk];\r\n  const middlewareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(middlewareEnhancer)\r\n  );\r\n\r\n  return store;\r\n};","import React from 'react';\nimport { render } from 'react-dom';\nimport Routes from './routes/Routes';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nconst store = configureStore();\n\nrender(\n  <Provider store={store}>\n    <Routes />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}